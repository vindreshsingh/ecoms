{"version":3,"sources":["actions/alert.js","actions/progress.js","actions/product.js","actions/actionTypes.js","components/Products/ProductItem.js","components/App.js","components/Navbar/Navbar.js","components/ProgressBar/ProgressBar.js","components/AddProduct/AddProduct.js","components/ProductDetail/ProductDetail.js","components/Products/Products.js","components/Cart/Cart.js","helpers/alert.js","helpers/urls.js","reducers/alert.js","reducers/progress.js","reducers/product.js","reducers/index.js","index.js","store/index.js"],"names":["setMessage","title","detail","type","SET_MESSAGE","clearMessage","CLEAR_MESSAGE","setError","SET_ERROR","clearError","CLEAR_ERROR","loadingStart","LOADING_START","loadingStop","LOADING_STOP","fetchProduct","dispatch","a","url","APIUrls","getProducts","fetch","method","then","response","json","data","product","UPDATE_PRODUCT","fetchCartItem","getCartItem","cart","UPDATE_CART","itemCount","length","addProduct","headers","body","JSON","stringify","deleteProduct","id","deleteProductUrl","addProductToCart","deleteCartItem","deleteCartItemUrl","updateProductItem","updateProductUrl","fetchOneProduct","fetchOneProductUrl","ADD_CURRENT_PRODUCT","currentProduct","ProductItem","props","handleChange","label","value","setState","rating","price","handleCancle","setEditableID","handleSubmit","handleSaveButton","state","handleCartButtonClick","cartButtonClick","handlePencilClick","handleDeleteButton","deleteButtonClick","image","this","editable","isCart","className","key","src","alt","to","map","aria-hidden","onClick","required","onChange","event","target","data-label","Component","App","isLoading","path","component","AddProduct","exact","Product","Cart","ProductDetail","connect","progress","error","alert","message","Navbar","handleMenuIconClick","menuIconClicked","handleButtonClick","cartItemCount","ProgressBar","input","preventDefault","formRef","current","reset","createRef","successMessageAlert","errorMessageAlert","ref","placeholder","rows","match","params","item","compare_item","b","eval","Products","onClickSortByPrice","sortByPrice","setEditableItem","editableID","handleAddToCart","sort","mapStateToProps","products","deleteItemFromCart","total","i","style","background","color","cursor","swal","text","icon","button","API_ROOT","initialState","combineReducers","action","store","createStore","reducer","applyMiddleware","thunk","logger","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+fAQA,SAASA,EAAWC,EAAOC,GACzB,MAAO,CACLC,KAAMC,IACNH,QACAC,UAKJ,SAASG,IACP,MAAO,CACLF,KAAMG,KAKV,SAASC,EAASN,EAAOC,GACvB,MAAO,CACLC,KAAMK,IACNP,QACAC,UAKJ,SAASO,IACP,MAAO,CACLN,KAAMO,KChCH,SAASC,IACd,MAAO,CACLR,KAAMS,KAKH,SAASC,IACd,MAAO,CACLV,KAAMW,K,mCCeH,SAASC,IACd,8CAAO,WAAOC,GAAP,eAAAC,EAAA,sEACCD,EAASL,KADV,cAECO,EAAMC,IAAQC,cAFf,SAGCC,MAAMH,EAAK,CACfI,OAAQ,QAEPC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAhBb,IAAuBC,EAiBfX,GAjBeW,EAiBQD,EAhBtB,CACLvB,KAAMyB,IACND,gBAMK,uBAUCX,EAASH,KAVV,2CAAP,sDAeK,SAASgB,IACd,8CAAO,WAAOb,GAAP,eAAAC,EAAA,sEACCD,EAASL,KADV,cAECO,EAAMC,IAAQW,cAFf,SAGCT,MAAMH,EAAK,CACfI,OAAQ,QAEPC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAzCb,IAAoBK,EA0CZf,GA1CYe,EA0CQL,EAzCnB,CACLvB,KAAM6B,IACND,OACAE,UAAWF,EAAKG,aA8BX,uBAUClB,EAASH,KAVV,2CAAP,sDAeK,SAASsB,EAAWR,GACzB,8CAAO,WAAOX,GAAP,eAAAC,EAAA,sEACCD,EAASL,KADV,cAECO,EAAMC,IAAQC,cAFf,SAGCC,MAAMH,EAAK,CACfI,OAAQ,OACRc,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUZ,KAEpBJ,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLV,EAAShB,EAAW,aAAc,kBAClCgB,EAASD,QAbR,uBAeCC,EAASH,KAfV,2CAAP,sDAoBK,SAAS2B,EAAcC,GAC5B,8CAAO,WAAOzB,GAAP,eAAAC,EAAA,sEACCD,EAASL,KADV,cAECO,EAAMC,IAAQuB,iBAAiBD,GAFhC,SAGCpB,MAAMH,EAAK,CACfI,OAAQ,WAEPC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLV,EAAShB,EAAW,aAAc,oBAClCgB,EAASD,QATR,uBAWCC,EAASH,KAXV,2CAAP,sDAgBK,SAAS8B,EAAiBhB,GAC/B,8CAAO,WAAOX,GAAP,eAAAC,EAAA,sEACCD,EAASL,KADV,cAECO,EAAMC,IAAQW,cAFf,SAGCT,MAAMH,EAAK,CACfI,OAAQ,OACRc,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUZ,KAEpBJ,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLV,EAASa,KACTb,EAAShB,EAAW,aAAc,6BAbjC,uBAeCgB,EAASH,KAfV,2CAAP,sDAoBK,SAAS+B,EAAeH,GAC7B,8CAAO,WAAOzB,GAAP,eAAAC,EAAA,sEACCD,EAASL,KADV,cAECO,EAAMC,IAAQ0B,kBAAkBJ,GAFjC,SAGCpB,MAAMH,EAAK,CACfI,OAAQ,WAEPC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLV,EAASa,KACTb,EACEhB,EAAW,aAAc,2CAV1B,uBAaCgB,EAASH,KAbV,2CAAP,sDAkBK,SAASiC,EAAkBL,EAAId,GACpC,8CAAO,WAAOX,GAAP,eAAAC,EAAA,sEACCD,EAASL,KADV,OAECO,EAAMC,IAAQ4B,iBAAiBN,GACrCpB,MAAMH,EAAK,CACTI,OAAQ,MACRc,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUZ,KAEpBJ,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLV,EAASD,KACTC,EAAShB,EAAW,aAAc,mCAEtCgB,EAASH,KAfJ,2CAAP,sDA4BK,SAASmC,EAAgBP,GAC9B,8CAAO,WAAOzB,GAAP,eAAAC,EAAA,sEACCD,EAASL,KADV,cAECO,EAAMC,IAAQ8B,mBAAmBR,GACvCpB,MAAMH,EAAK,CACTI,OAAQ,QAEPC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAhBb,IAA8BC,EAiBtBX,GAjBsBW,EAiBQD,EAhB7B,CACLvB,KAAM+C,IACNC,eAAgBxB,QAMX,SAUCX,EAASH,KAVV,2CAAP,wD,+BCvKF,kTACO,IAAMD,EAAgB,gBAChBE,EAAe,eAGfV,EAAc,cACdE,EAAgB,gBAChBE,EAAY,YACZE,EAAc,cAGdkB,EAAiB,iBAGjBI,EAAc,cAGdkB,EAAsB,uB,0FCd7BE,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAiBRC,aAAe,SAACC,EAAOC,GACP,WAAVD,EACF,EAAKE,SAAS,CAAEvD,OAAQsD,IACL,UAAVD,EACT,EAAKE,SAAS,CAAExD,MAAOuD,IACJ,WAAVD,EACT,EAAKE,SAAS,CAAEC,OAAQF,IACL,UAAVD,GACT,EAAKE,SAAS,CAAEE,MAAOH,KA1BR,EA+BnBI,aAAe,WACb,EAAKP,MAAMQ,cAAc,KAhCR,EAoCnBC,aAAe,SAACrB,GACd,EAAKY,MAAMU,iBAAiBtB,EAAI,EAAKuB,OACrC,EAAKX,MAAMQ,cAAc,KAtCR,EA0CnBI,sBAAwB,SAACxB,GACvB,EAAKY,MAAMa,gBAAgBzB,IA3CV,EAgDnB0B,kBAAoB,SAAC1B,GACnB,EAAKY,MAAMQ,cAAcpB,IAjDR,EAqDnB2B,mBAAqB,SAAC3B,GACpB,EAAKY,MAAMgB,kBAAkB5B,IApD7B,EAAKuB,MAAQ,CACXL,MAAO,GACP1D,MAAO,GACPyD,OAAQ,GACRxD,OAAQ,GACRoE,MAAO,IAPQ,E,gEAYE,IAAD,EACkCC,KAAKlB,MAAM1B,QAAvDc,EADU,EACVA,GAAIxC,EADM,EACNA,MAAOyD,EADD,EACCA,OAAQC,EADT,EACSA,MAAOzD,EADhB,EACgBA,OAAQoE,EADxB,EACwBA,MAC1CC,KAAKd,SAAS,CAAEhB,KAAIxC,QAAOyD,SAAQC,QAAOzD,SAAQoE,Y,+BA4C1C,IAAD,OAEC3C,EAAY4C,KAAKlB,MAAjB1B,QAFD,EAG6C4C,KAAKP,MAAjDvB,EAHD,EAGCA,GAAIxC,EAHL,EAGKA,MAAOyD,EAHZ,EAGYA,OAAQC,EAHpB,EAGoBA,MAAOzD,EAH3B,EAG2BA,OAAQoE,EAHnC,EAGmCA,MAHnC,EAIsBC,KAAKlB,MAA1BmB,EAJD,EAICA,SAAUC,EAJX,EAIWA,OAClB,OACE,yBAAKC,UAAU,yBAAyBC,IAAKlC,IACzC+B,GACA,yBAAKE,UAAU,iBACb,yBAAKA,UAAU,SACb,yBAAKE,IAAKN,EAAOO,IAAK5E,KAExB,yBAAKyE,UAAU,kBACb,kBAAC,IAAD,CAAMI,GAAE,0BAAqBrC,IAC3B,yBAAKiC,UAAU,SAAQ,0BAAMA,UAAU,SAAhB,UAAsCzE,IAE/D,yBAAKyE,UAAU,UAAS,0BAAMA,UAAU,SAAhB,YAAwCxE,GAChE,yBAAKwE,UAAU,UACd,0BAAMA,UAAU,SAAhB,WADD,IAhBU,CAAC,EAAG,EAAG,EAAG,EAAG,GAiB8BK,KAAI,SAACvB,GACtD,OAAIA,GAASE,EAET,uBACEgB,UAAU,aACVM,cAAY,OACZL,IAAKnB,IAIJ,0BAAMmB,IAAKnB,SAIxB,yBAAKkB,UAAU,oBACb,yBAAKA,UAAU,SACf,wCACE,yBAAKA,UAAU,OAAf,MAAyBf,IAE3B,yBACEe,UAAU,cACVO,QAAS,WACP,EAAKhB,sBAAsBtC,KAG5B8C,EAAS,mBAAqB,gBAE/BA,GACA,yBAAKC,UAAU,WACb,uBACEA,UAAU,eACVO,QAAS,WACP,EAAKd,kBAAkB1B,MAG3B,uBACEiC,UAAU,cACVO,QAAS,WACP,EAAKb,mBAAmB3B,SAQrC+B,GACC,yBAAKE,UAAU,iBACb,yBAAKA,UAAU,SACb,yBAAKE,IAAKN,EAAOO,IAAK5E,KAExB,yBAAKyE,UAAU,kBACb,yBAAKA,UAAU,SACb,2BACEvE,KAAK,OACLqD,MAAOvD,EACPiF,UAAQ,EACRC,SAAU,SAACC,GACT,EAAK9B,aAAa,QAAS8B,EAAMC,OAAO7B,WAI9C,yBAAKkB,UAAU,UACb,8BACEvE,KAAK,OACLqD,MAAOtD,EACPoF,aAAW,SACXJ,UAAQ,EACRC,SAAU,SAACC,GACT,EAAK9B,aAAa,SAAU8B,EAAMC,OAAO7B,WAI/C,yBAAKkB,UAAU,UAEX,2BACEvE,KAAK,SACLqD,MAAOE,EACPwB,UAAQ,EACRC,SAAU,SAACC,GACT,EAAK9B,aAAa,SAAU8B,EAAMC,OAAO7B,YAMnD,yBAAKkB,UAAU,oBACb,yBAAKA,UAAU,SACb,uCACA,yBAAKA,UAAU,OAAf,MAEE,2BACEvE,KAAK,SACLqD,MAAOG,EACPuB,UAAQ,EACRC,SAAU,SAACC,GACT,EAAK9B,aAAa,QAAS8B,EAAMC,OAAO7B,YAKhD,yBAAKkB,UAAU,WACb,uBAAGA,UAAU,cAAcO,QAASV,KAAKX,eACzC,uBACEc,UAAU,cACVO,QAAS,WACP,EAAKnB,aAAarB,c,GAvLZ8C,aAoMXnC,O,uYCzLToC,E,uKAGM,IACAC,EAAclB,KAAKlB,MAAnBoC,UACR,OACE,kBAAC,IAAD,KACE,yBAAKf,UAAU,OACb,yBAAKA,UAAU,cACf,kBAAC,EAAD,MACA,yBAAKA,UAAU,uBACde,GAAa,kBAAC,EAAD,MACd,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,eAAeC,UAAWC,IACtC,kBAAC,IAAD,CAAOF,KAAK,IAAIG,OAAK,EAACF,UAAWG,MACjC,kBAAC,IAAD,CAAOJ,KAAK,QAAQC,UAAWI,MAC/B,kBAAC,IAAD,CAAOL,KAAK,sBAAsBC,UAAWK,W,GAhBvCT,aAkCHU,mBATf,SAAyBjC,GACvB,MAAO,CACLyB,UAAWzB,EAAMkC,SAAST,UAC1BU,MAAOnC,EAAMoC,MAAMD,MACnBE,QAASrC,EAAMoC,MAAMC,WAKVJ,CAAyBT,G,OC3ClCc,E,kDACJ,WAAYjD,GAAQ,IAAD,8BACjB,cAAMA,IAYRkD,oBAAsB,WACpB,EAAK9C,SAAS,CAAE+C,iBAAkB,EAAKxC,MAAMwC,mBAd5B,EAmBnBC,kBAAoB,WAClB,EAAKhD,SAAS,CAAE+C,iBAAiB,KAlBjC,EAAKxC,MAAQ,CACXwC,iBAAiB,GAHF,E,gEASjBjC,KAAKlB,MAAMrC,SAASa,iB,+BAeZ,IACA6E,EAAkBnC,KAAKlB,MAAvBqD,cACR,OACE,yBAAKhC,UAAU,iCACb,yBAAKA,UAAU,eACb,kBAAC,IAAD,CAAMI,GAAG,IAAIG,QAASV,KAAKkC,mBAA3B,UAIF,yBAAK/B,UAAU,YAAYO,QAASV,KAAKgC,qBACvC,uBACE7B,UACEH,KAAKP,MAAMwC,gBAAkB,cAAgB,aAE/CxB,cAAY,UAGhB,wBACEN,UACEH,KAAKP,MAAMwC,gBAAkB,qBAAuB,eAGtD,4BACE,kBAAC,IAAD,CACE9B,UAAU,eACVI,GAAG,IACHG,QAASV,KAAKkC,mBAHhB,aAQF,4BACE,kBAAC,IAAD,CACE/B,UAAU,eACVI,GAAG,eACHG,QAASV,KAAKkC,mBAHhB,gBAQF,4BACE,kBAAC,IAAD,CACE/B,UAAU,oBACVI,GAAG,QACHG,QAASV,KAAKkC,mBAEd,uBAAG/B,UAAU,sBAAsBM,cAAY,SAC/C,8BAAO0B,EAAgB,EAAIA,EAAgB,Y,GAxEpCnB,aAyFNU,mBAPf,SAAyBjC,GACvB,MAAO,CACL0C,cAAe1C,EAAMrC,QAAQ+E,iBAKlBT,CAAyBK,G,QCnFzBK,EARK,WAClB,OACE,uBAAKjC,UAAU,0BACb,uBAAKA,UAAU,wB,OCMfkB,E,kDACJ,WAAYvC,GAAQ,IAAD,8BACjB,cAAMA,IAkCRC,aAAe,SAACsD,EAAOpD,GACP,UAAVoD,EACF,EAAKnD,SAAS,CAAExD,MAAOuD,IACJ,WAAVoD,EACT,EAAKnD,SAAS,CAAEC,OAAQF,IACL,WAAVoD,EACT,EAAKnD,SAAS,CAAEvD,OAAQsD,IACL,UAAVoD,EACT,EAAKnD,SAAS,CAAEE,MAAOH,IACJ,UAAVoD,GACT,EAAKnD,SAAS,CAAEa,MAAOd,KA7CR,EAkDnBM,aAAe,SAACsB,GACdA,EAAMyB,iBADkB,MAEwB,EAAK7C,MAA7C/D,EAFgB,EAEhBA,MAAO0D,EAFS,EAETA,MAAOzD,EAFE,EAEFA,OAAQwD,EAFN,EAEMA,OAAQY,EAFd,EAEcA,MAC9BtD,EAAa,EAAKqC,MAAlBrC,SAIW,IAAjBf,EAAMiC,QACW,IAAjByB,EAAMzB,QACY,IAAlBhC,EAAOgC,QACW,IAAlBwB,EAAOxB,QACU,IAAjBoC,EAAMpC,QAMRlB,EAASmB,YAAW,EAAK6B,QACzB,EAAK8C,QAAQC,QAAQC,SALnBhG,EAAST,YAAS,gBAAiB,6BA7DrC,EAAKyD,MAAQ,CACX/D,MAAO,GACP0D,MAAO,GACPzD,OAAQ,GACRwD,OAAQ,EACRY,MAAO,IAET,EAAKwC,QAAUG,sBATE,E,gEAaE,IAAD,EACc1C,KAAKlB,MAA7BoC,EADU,EACVA,UAAWzE,EADD,EACCA,UACD,IAAdyE,GACFzE,EAASH,iB,2CAMS,IAAD,EACkB0D,KAAKlB,MAAlC8C,EADW,EACXA,MAAOnF,EADI,EACJA,SAAUqF,EADN,EACMA,QACV,MAAXA,IACFa,YAAoBb,EAAQpG,MAAOoG,EAAQnG,QAC3Cc,EAASX,gBAEE,MAAT8F,IACFgB,YAAkBhB,EAAMlG,MAAOkG,EAAMjG,QACrCc,EAASP,kB,+BA0CH,IAAD,OACP,OACE,yBAAKiE,UAAU,yBACb,yBAAKA,UAAU,WAAf,eACA,0BAAM0C,IAAK7C,KAAKuC,SACd,yBAAKpC,UAAU,mBACb,wCACA,2BACEvE,KAAK,OACL+E,UAAU,EACVmC,YAAY,QACZlC,SAAU,SAACC,GACT,EAAK9B,aAAa,QAAS8B,EAAMC,OAAO7B,WAI9C,yBAAKkB,UAAU,mBACb,wCACA,2BACEvE,KAAK,SACL+E,UAAU,EACVmC,YAAY,QACZlC,SAAU,SAACC,GACT,EAAK9B,aAAa,QAAS8B,EAAMC,OAAO7B,WAI9C,yBAAKkB,UAAU,mBACb,yCACA,2BACEvE,KAAK,SACL+E,UAAU,EACVmC,YAAY,SACZlC,SAAU,SAACC,GACT,EAAK9B,aAAa,SAAU8B,EAAMC,OAAO7B,WAI/C,yBAAKkB,UAAU,mBACb,yCACA,8BACE4C,KAAK,IACLnH,KAAK,OACL+E,UAAU,EACVmC,YAAY,SACZlC,SAAU,SAACC,GACT,EAAK9B,aAAa,SAAU8B,EAAMC,OAAO7B,WAI/C,yBAAKkB,UAAU,mBACb,4CACA,2BACEvE,KAAK,OACLkH,YAAY,YACZlC,SAAU,SAACC,GACT,EAAK9B,aAAa,QAAS8B,EAAMC,OAAO7B,WAI9C,4BAAQyB,QAASV,KAAKT,cAAtB,gB,GArIeyB,aAsJVU,mBATf,SAAyBjC,GACvB,MAAO,CACLmC,MAAOnC,EAAMoC,MAAMD,MACnBE,QAASrC,EAAMoC,MAAMC,QACrBZ,UAAWzB,EAAMkC,SAAST,aAKfQ,CAAyBL,G,QCvJlCI,E,4MA2BJ/B,sBAAwB,WACtB,EAAKZ,MAAMrC,SAAS2B,YAAiB,EAAKU,MAAM1B,W,mEAzB5B,IAAD,EACa4C,KAAKlB,MAA7BoC,EADW,EACXA,UAAWzE,EADA,EACAA,UACD,IAAdyE,GACFzE,EAASH,eAEX,IAAI4B,EAAK8B,KAAKlB,MAAMkE,MAAMC,OAAO/E,GACjCzB,EAASgC,YAAgBP,M,2CAKL,IAAD,EACkB8B,KAAKlB,MAAlC8C,EADW,EACXA,MAAOnF,EADI,EACJA,SAAUqF,EADN,EACMA,QACV,MAAXA,IACFa,YAAoBb,EAAQpG,MAAOoG,EAAQnG,QAC3Cc,EAASX,gBAEE,MAAT8F,IACFgB,YAAkBhB,EAAMlG,MAAOkG,EAAMjG,QACrCc,EAASP,kB,+BAWX,GAA2B,OAAvB8D,KAAKlB,MAAM1B,QACb,OAAO,8BAFF,MAIyC4C,KAAKlB,MAAM1B,QAAnD1B,EAJD,EAICA,MAAO0D,EAJR,EAIQA,MAAOzD,EAJf,EAIeA,OAAQoE,EAJvB,EAIuBA,MAAOZ,EAJ9B,EAI8BA,OAErC,OACE,yBAAKgB,UAAU,4BACb,yBAAKA,UAAU,WAAf,kBACA,yBAAKA,UAAU,iBACb,yBAAKE,IAAKN,EAAOO,IAAK5E,KAExB,yBAAKyE,UAAU,yBACb,uCACA,6BAAMzE,IAER,yBAAKyE,UAAU,yBACb,wCACA,6BAAMf,IAER,yBAAKe,UAAU,yBACb,yCACA,6BAjBY,CAAC,EAAG,EAAG,EAAG,EAAG,GAkBVK,KAAI,SAAC0C,GAChB,OAAIA,GAAQ/D,EAER,uBAAGgB,UAAU,aAAaM,cAAY,OAAOL,IAAK8C,IAG/C,oCAIb,yBAAK/C,UAAU,0CACb,yBAAKA,UAAU,UAAf,YACA,yBAAKA,UAAU,QAAQxE,IAEzB,4BAAQwE,UAAU,SAASO,QAASV,KAAKN,uBAAzC,oB,GArEoBsB,aAwFbU,mBAVf,SAAyBjC,GACvB,MAAO,CACLrC,QAASqC,EAAMrC,QAAQwB,eACvBsC,UAAWzB,EAAMkC,SAAST,UAC1BU,MAAOnC,EAAMoC,MAAMD,MACnBE,QAASrC,EAAMoC,MAAMC,WAKVJ,CAAyBD,G,s2CCpFxC,SAAS0B,aAAazG,EAAG0G,GAEvB,OAAIC,KAAK3G,EAAE0C,OAASiE,KAAKD,EAAEhE,QACjB,EAECiE,KAAK3G,EAAE0C,OAASiE,KAAKD,EAAEhE,OACzB,EAGA,E,IAILkE,S,2VACJ,WAAYxE,GAAQ,IAAD,uLACjB,cAAMA,IAmBRyE,mBAAqB,WAAO,IAClBC,EAAgB,EAAK/D,MAArB+D,YACR,EAAKtE,SAAS,CAAEsE,aAAcA,KAtBb,EA0CnBC,gBAAkB,SAACvF,GACjB,EAAKgB,SAAS,CAAEwE,WAAYxF,KA3CX,EA+CnByF,gBAAkB,SAACvG,GACjB,EAAK0B,MAAMrC,SAAS2B,gDAAiBhB,KAhDpB,EAoDnByC,mBAAqB,SAAC3B,GACpB,EAAKY,MAAMrC,SAASwB,gDAAcC,KArDjB,EA2DnBsB,iBAAmB,SAACtB,EAAId,GACtB,EAAK0B,MAAMrC,SAAS8B,gDAAkBL,EAAId,KA1D1C,EAAKqC,MAAQ,CACXiE,WAAY,GACZF,aAAa,GAJE,E,sNAUE,IAAD,EACcxD,KAAKlB,MAA7BoC,EADU,EACVA,UAAWzE,EADD,EACCA,UACD,IAAdyE,GACFzE,EAASH,mDAEXG,EAASD,qD,2CAYW,IAAD,EACkBwD,KAAKlB,MAAlC8C,EADW,EACXA,MAAOnF,EADI,EACJA,SAAUqF,EADN,EACMA,QACV,MAAXA,IACFa,gDAAoBb,EAAQpG,MAAOoG,EAAQnG,QAC3Cc,EAASX,oDAEE,MAAT8F,IACFgB,gDAAkBhB,EAAMlG,MAAOkG,EAAMjG,QACrCc,EAASP,sD,+BA8BH,IAAD,SAC2B8D,KAAKP,MAAjCiE,EADC,EACDA,WAAYF,EADX,EACWA,YACZpG,EAAY4C,KAAKlB,MAAjB1B,QACN,GAAIoG,EAAa,CAGfpG,EADI,wKAAOA,GACIwG,KAAKT,mBAEpB/F,EAAU4C,KAAKlB,MAAM1B,QAEvB,OACE,kEAAK+C,UAAU,sBACb,kEAAKA,UAAU,oBACb,kEAAKA,UAAU,WAAf,aACA,kEAAKA,UAAU,aAAaO,QAASV,KAAKuD,oBACvCC,EACC,gEAAGrD,UAAU,cAAcM,cAAY,SAEvC,kBAILrD,EAAQoD,KAAI,SAACpD,GACZ,OACE,2DAAC,4CAAD,CACEA,QAASA,EACT6C,SAAUyD,IAAetG,EAAQc,GACjCoB,cAAe,EAAKmE,gBACpB9D,gBAAiB,EAAKgE,gBACtB7D,kBAAmB,EAAKD,mBACxBL,iBAAkB,EAAKA,iBACvBY,IAAKhD,EAAQc,GACbgC,QAAQ,Y,GAlGCc,8CA4GvB,SAAS6C,gBAAgBpE,GACvB,MAAO,CACLyB,UAAWzB,EAAMkC,SAAST,UAC1BU,MAAOnC,EAAMoC,MAAMD,MACnBE,QAASrC,EAAMoC,MAAMC,QACrB1E,QAASqC,EAAMrC,QAAQ0G,UAKZpC,yEAAQmC,gBAARnC,CAAyB4B,W,sqCCtIlC9B,K,2rBA0BJuC,mBAAqB,SAAC3G,GACpB,EAAK0B,MAAMrC,SAAS4B,gDAAejB,EAAQc,M,2NAxBxB,IAAD,EACc8B,KAAKlB,MAA7BoC,EADU,EACVA,UAAWzE,EADD,EACCA,UACD,IAAdyE,GACFzE,EAASH,mDAEXG,EAASa,qD,2CAKW,IAAD,EACkB0C,KAAKlB,MAAlC8C,EADW,EACXA,MAAOnF,EADI,EACJA,SAAUqF,EADN,EACMA,QACV,MAAXA,IACFa,gDAAoBb,EAAQpG,MAAOoG,EAAQnG,QAC3Cc,EAASX,oDAEE,MAAT8F,IACFgB,gDAAkBhB,EAAMlG,MAAOkG,EAAMjG,QACrCc,EAASP,sD,sCAcX,IAJQ,IAAD,YACHkB,QAAU4C,KAAKlB,MAAM1B,QACrB4G,MAAQ,EAEHC,EAAI,EAAGA,EAAI7G,QAAQO,OAAQsG,IAClCD,OAASX,KAAKjG,QAAQ6G,GAAG7E,OAE3B,OACE,kEAAKe,UAAU,sBACb,kEAAKA,UAAU,oBACb,kEAAKA,UAAU,WAAf,QACA,kEACEA,UAAU,aACV+D,MAAO,CACLC,WAAY,cACZC,MAAO,QACPC,OAAQ,WAEV3D,QAASV,KAAKuD,oBAPhB,WASWS,QAGZ5G,QAAQoD,KAAI,SAACpD,GACZ,OACE,2DAAC,2CAAD,CACEA,QAASA,EACT6C,UAAU,EACVN,gBAAiB,OAAKoE,mBACtB3D,IAAKhD,EAAQc,GACbgC,QAAQ,Y,MA7DHc,8CAuEnB,SAAS6C,gBAAgBpE,GACvB,MAAO,CACLmC,MAAOnC,EAAMoC,MAAMD,MACnBE,QAASrC,EAAMoC,MAAMC,QACrBZ,UAAWzB,EAAMkC,SAAST,UAC1B9D,QAASqC,EAAMrC,QAAQI,MAKZkE,yEAAQmC,gBAARnC,CAAyBF,O,0JChFjC,SAASoB,EAAkBlH,EAAOkG,GACvC0C,IAAK,CACH5I,MAAOA,EACP6I,KAAM3C,EACN4C,KAAM,UACNC,OAAQ,OAKL,SAAS9B,EAAoBjH,EAAOoG,GACzCwC,IAAK,CACH5I,MAAOA,EACP6I,KAAMzC,EACN0C,KAAM,UACNC,OAAQ,OC3BZ,IAAMC,EAAW,qDAGJ9H,EAAU,CACrBC,YAAa,2BAAS6H,EAAT,aACbnH,YAAa,2BAASmH,EAAT,UACbvG,iBAAkB,SAACD,GAAD,gBAAWwG,EAAX,oBAA+BxG,IACjDI,kBAAmB,SAACJ,GAAD,gBAAWwG,EAAX,iBAA4BxG,IAC/CM,iBAAkB,SAACN,GAAD,gBAAWwG,EAAX,oBAA+BxG,IACjDQ,mBAAoB,SAACR,GAAD,gBAAWwG,EAAX,oBAA+BxG,M,wMCF/CyG,EAAe,CACnB7C,QAAS,KACTF,MAAO,MCPT,IAAM+C,EAAe,CACnBzD,WAAW,GCGb,IAAMyD,EAAe,CACnBb,SAAU,GACVtG,KAAM,GACN2E,cAAe,EACfvD,eAAgB,MCLHgG,kBAAgB,CAAE/C,MHQlB,WAA6C,IAA/BpC,EAA8B,uDAAtBkF,EAAcE,EAAQ,uCACzD,OAAQA,EAAOjJ,MACb,KAAKC,IACH,OAAO,2BACF4D,GADL,IAEEqC,QAAS,CAAEpG,MAAOmJ,EAAOnJ,MAAOC,OAAQkJ,EAAOlJ,UAEnD,KAAKI,IACH,OAAO,2BACF0D,GADL,IAEEqC,QAAS,OAEb,KAAK7F,IACH,OAAO,2BACFwD,GADL,IAEEmC,MAAO,CAAElG,MAAOmJ,EAAOnJ,MAAOC,OAAQkJ,EAAOlJ,UAEjD,KAAKQ,IACH,OAAO,2BACFsD,GADL,IAEEmC,MAAO,OAEX,QACE,OAAOnC,IG/B2BkC,SFEzB,WAA6C,IAA/BlC,EAA8B,uDAAtBkF,EAAcE,EAAQ,uCACzD,OAAQA,EAAOjJ,MACb,KAAKS,IACH,OAAO,2BACFoD,GADL,IAEEyB,WAAW,IAEf,KAAK3E,IACH,OAAO,2BACFkD,GADL,IAEEyB,WAAW,IAEf,QACE,OAAOzB,IEfqCrC,QDSnC,WAA6C,IAA/BqC,EAA8B,uDAAtBkF,EAAcE,EAAQ,uCACzD,OAAQA,EAAOjJ,MACb,KAAKyB,IACH,OAAO,2BAAKoC,GAAZ,IAAmBqE,SAAUe,EAAOzH,UAEtC,KAAKK,IACH,OAAO,2BACFgC,GADL,IAEEjC,KAAMqH,EAAOrH,KACb2E,cAAe0C,EAAOnH,YAG1B,KAAKiB,IACH,OAAO,2BACFc,GADL,IAEEb,eAAgBiG,EAAOjG,iBAG3B,QACE,OAAOa,M,6BE1BPqF,ECAIC,YAAYC,EAASC,YAAgBC,IAAOC,MDGtDC,IAASC,OACP,kBAAC,IAAD,CAAUP,MAAOA,GACf,kBAAC,IAAMQ,WAAP,KACE,kBAAC,IAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.6dde722c.chunk.js","sourcesContent":["import {\n  SET_MESSAGE,\n  CLEAR_MESSAGE,\n  SET_ERROR,\n  CLEAR_ERROR,\n} from './actionTypes';\n\n// for setting up message in alert state\nfunction setMessage(title, detail) {\n  return {\n    type: SET_MESSAGE,\n    title,\n    detail,\n  };\n}\n\n// for clearing message in alert after showing alert\nfunction clearMessage() {\n  return {\n    type: CLEAR_MESSAGE,\n  };\n}\n\n// for setting up error in state\nfunction setError(title, detail) {\n  return {\n    type: SET_ERROR,\n    title,\n    detail,\n  };\n}\n\n// for clearing error from the state after showing alert\nfunction clearError() {\n  return {\n    type: CLEAR_ERROR,\n  };\n}\n\nexport { setMessage, clearMessage, setError, clearError };\n","import { LOADING_START, LOADING_STOP } from './actionTypes';\n\n// setting progress bar status to true when app is doing API call\nexport function loadingStart() {\n  return {\n    type: LOADING_START,\n  };\n}\n\n// setting progress bar status to false when app is completed API call\nexport function loadingStop() {\n  return {\n    type: LOADING_STOP,\n  };\n}\n","import {\n  UPDATE_CART,\n  UPDATE_PRODUCT,\n  ADD_CURRENT_PRODUCT,\n} from './actionTypes';\nimport { loadingStart, loadingStop } from './progress';\nimport { APIUrls } from '../helpers';\nimport { setMessage } from './alert';\n\n// updating product in cart in store\nfunction updateCart(cart) {\n  return {\n    type: UPDATE_CART,\n    cart,\n    itemCount: cart.length,\n  };\n}\n\n// updating product in store\nfunction updateProduct(product) {\n  return {\n    type: UPDATE_PRODUCT,\n    product,\n  };\n}\n\n// getting product from API\nexport function fetchProduct() {\n  return async (dispatch) => {\n    await dispatch(loadingStart());\n    const url = APIUrls.getProducts();\n    await fetch(url, {\n      method: 'GET',\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        dispatch(updateProduct(data));\n      });\n    await dispatch(loadingStop());\n  };\n}\n\n// getting cart Item from API\nexport function fetchCartItem() {\n  return async (dispatch) => {\n    await dispatch(loadingStart());\n    const url = APIUrls.getCartItem();\n    await fetch(url, {\n      method: 'GET',\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        dispatch(updateCart(data));\n      });\n    await dispatch(loadingStop());\n  };\n}\n\n// adding product to the API\nexport function addProduct(product) {\n  return async (dispatch) => {\n    await dispatch(loadingStart());\n    const url = APIUrls.getProducts();\n    await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(product),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        dispatch(setMessage('Successful', 'Product Added'));\n        dispatch(fetchProduct());\n      });\n    await dispatch(loadingStop());\n  };\n}\n\n// deleting product from API\nexport function deleteProduct(id) {\n  return async (dispatch) => {\n    await dispatch(loadingStart());\n    const url = APIUrls.deleteProductUrl(id);\n    await fetch(url, {\n      method: 'DELETE',\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        dispatch(setMessage('Successful', 'Product Deleted'));\n        dispatch(fetchProduct());\n      });\n    await dispatch(loadingStop());\n  };\n}\n\n// adding product to cart\nexport function addProductToCart(product) {\n  return async (dispatch) => {\n    await dispatch(loadingStart());\n    const url = APIUrls.getCartItem();\n    await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(product),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        dispatch(fetchCartItem());\n        dispatch(setMessage('Successful', 'Product Added to Cart'));\n      });\n    await dispatch(loadingStop());\n  };\n}\n\n// for deleting cart Item\nexport function deleteCartItem(id) {\n  return async (dispatch) => {\n    await dispatch(loadingStart());\n    const url = APIUrls.deleteCartItemUrl(id);\n    await fetch(url, {\n      method: 'DELETE',\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        dispatch(fetchCartItem());\n        dispatch(\n          setMessage('Successful', 'Item removed from Cart Successfully')\n        );\n      });\n    await dispatch(loadingStop());\n  };\n}\n\n// for updating product item with id and new product values\nexport function updateProductItem(id, product) {\n  return async (dispatch) => {\n    await dispatch(loadingStart());\n    const url = APIUrls.updateProductUrl(id);\n    fetch(url, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(product),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        dispatch(fetchProduct());\n        dispatch(setMessage('Successful', 'Product Update Successfully'));\n      });\n    dispatch(loadingStop());\n  };\n}\n\n// saving current product to the store\nfunction updateCurrentProduct(product) {\n  return {\n    type: ADD_CURRENT_PRODUCT,\n    currentProduct: product,\n  };\n}\n\n// fetching single product by id\nexport function fetchOneProduct(id) {\n  return async (dispatch) => {\n    await dispatch(loadingStart());\n    const url = APIUrls.fetchOneProductUrl(id);\n    fetch(url, {\n      method: 'GET',\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        dispatch(updateCurrentProduct(data));\n      });\n    await dispatch(loadingStop());\n  };\n}\n","// action type for loading procss\nexport const LOADING_START = 'LOADING_START';\nexport const LOADING_STOP = 'LOADING_STOP';\n\n// setting up the message and error in alert reducer\nexport const SET_MESSAGE = 'SET_MESSAGE';\nexport const CLEAR_MESSAGE = 'CLEAR_MESSAGE';\nexport const SET_ERROR = 'SET_ERROR';\nexport const CLEAR_ERROR = 'CLEAR_ERROR';\n\n// actions type related to product\nexport const UPDATE_PRODUCT = 'UPDATE_PRODUCT';\n\n// action type related to cart\nexport const UPDATE_CART = 'UPDATE_CART';\n\n// action type for updating current product\nexport const ADD_CURRENT_PRODUCT = 'ADD_CURRENT_PRODUCT';\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass ProductItem extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      price: '',\n      title: '',\n      rating: '',\n      detail: '',\n      image: '',\n    };\n  }\n\n  // on mouting setting product detail in state for updating value when its in editing mode\n  componentDidMount() {\n    const { id, title, rating, price, detail, image } = this.props.product;\n    this.setState({ id, title, rating, price, detail, image });\n  }\n\n  // on changing any of the attribute changing the value in state in editable mode\n  handleChange = (label, value) => {\n    if (label === 'detail') {\n      this.setState({ detail: value });\n    } else if (label === 'title') {\n      this.setState({ title: value });\n    } else if (label === 'rating') {\n      this.setState({ rating: value });\n    } else if (label === 'price') {\n      this.setState({ price: value });\n    }\n  };\n\n  // switching editing mode off\n  handleCancle = () => {\n    this.props.setEditableID('');\n  };\n\n  // on submit the product in editable state setting new value of product\n  handleSubmit = (id) => {\n    this.props.handleSaveButton(id, this.state);\n    this.props.setEditableID('');\n  };\n\n  // handling cart button click whether to add to cart or remove from cart\n  handleCartButtonClick = (id) => {\n    this.props.cartButtonClick(id);\n  };\n\n  // handling edit button click to change the mode to editable\n  // changing editable mode to on\n  handlePencilClick = (id) => {\n    this.props.setEditableID(id);\n  };\n\n  // handeling delete button to delete product\n  handleDeleteButton = (id) => {\n    this.props.deleteButtonClick(id);\n  };\n\n  // rendering product item container\n  render() {\n    const ratingArray = [1, 2, 3, 4, 5];\n    const { product } = this.props;\n    const { id, title, rating, price, detail, image } = this.state;\n    const { editable, isCart } = this.props;\n    return (\n      <div className=\"product-item-container\" key={id}>\n        {!editable && (\n          <div className=\"container-div\">\n            <div className=\"image\">\n              <img src={image} alt={title}></img>\n            </div>\n            <div className=\"product-detail\">\n              <Link to={`/product-detail/${id}`}>\n                <div className=\"title\"><span className=\"heads\">Title:</span>{title}</div>\n              </Link>\n              <div className=\"detail\"><span className=\"heads\">Details:</span>{detail}</div>\n              <div className=\"rating\">\n               <span className=\"heads\">Rating:</span> {ratingArray.map((value) => {\n                  if (value <= rating) {\n                    return (\n                      <i\n                        className=\"fa fa-star\"\n                        aria-hidden=\"true\"\n                        key={value}\n                      ></i>\n                    );\n                  }\n                  return <span key={value}></span>;\n                })}\n              </div>\n            </div>\n            <div className=\"option-container\">\n              <div className=\"price\">\n              <span>Price:</span>\n                <div className=\"tag\">Rs {price}</div>\n              </div>\n              <div\n                className=\"add-to-cart\"\n                onClick={() => {\n                  this.handleCartButtonClick(product);\n                }}\n              >\n                {isCart ? 'Remove from Cart' : 'Add to Cart'}\n              </div>\n              {!isCart && (\n                <div className=\"buttons\">\n                  <i\n                    className=\"fa fa-pencil\"\n                    onClick={() => {\n                      this.handlePencilClick(id);\n                    }}\n                  ></i>\n                  <i\n                    className=\"fa fa-trash\"\n                    onClick={() => {\n                      this.handleDeleteButton(id);\n                    }}\n                  ></i>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n        {editable && (\n          <div className=\"container-div\">\n            <div className=\"image\">\n              <img src={image} alt={title}></img>\n            </div>\n            <div className=\"product-detail\">\n              <div className=\"title\">\n                <input\n                  type=\"text\"\n                  value={title}\n                  required\n                  onChange={(event) => {\n                    this.handleChange('title', event.target.value);\n                  }}\n                />\n              </div>\n              <div className=\"detail\">\n                <textarea\n                  type=\"text\"\n                  value={detail}\n                  data-label=\"detail\"\n                  required\n                  onChange={(event) => {\n                    this.handleChange('detail', event.target.value);\n                  }}\n                />\n              </div>\n              <div className=\"rating\">\n                {\n                  <input\n                    type=\"number\"\n                    value={rating}\n                    required\n                    onChange={(event) => {\n                      this.handleChange('rating', event.target.value);\n                    }}\n                  />\n                }\n              </div>\n            </div>\n            <div className=\"option-container\">\n              <div className=\"price\">\n                <div>Price:</div>\n                <div className=\"tag\">\n                  Rs:\n                  <input\n                    type=\"number\"\n                    value={price}\n                    required\n                    onChange={(event) => {\n                      this.handleChange('price', event.target.value);\n                    }}\n                  />\n                </div>\n              </div>\n              <div className=\"buttons\">\n                <i className=\"fa fa-times\" onClick={this.handleCancle}></i>\n                <i\n                  className=\"fa fa-check\"\n                  onClick={() => {\n                    this.handleSubmit(id);\n                  }}\n                ></i>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\n// exporting container\nexport default ProductItem;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport '../styles/App.css';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n// importing all the component here to use thems\nimport {\n  Navbar,\n  Product,\n  ProgressBar,\n  AddProduct,\n  Cart,\n  ProductDetail,\n} from '../components';\n\nclass App extends Component {\n  // rendering app componet\n  // using router to manage which component to render\n  render() {\n    const { isLoading } = this.props;\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"blank-nav\"></div>\n          <Navbar />\n          <div className=\"blank-progress-bar\"></div>\n          {isLoading && <ProgressBar />}\n          <Switch>\n            <Route path=\"/add-product\" component={AddProduct} />\n            <Route path=\"/\" exact component={Product} />\n            <Route path=\"/cart\" component={Cart} />\n            <Route path=\"/product-detail/:id\" component={ProductDetail} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\n// mapping store item to props\nfunction mapStateToProps(state) {\n  return {\n    isLoading: state.progress.isLoading,\n    error: state.alert.error,\n    message: state.alert.message,\n  };\n}\n\n// sending props to component\nexport default connect(mapStateToProps)(App);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { fetchCartItem } from \"../../actions\";\n\nclass Navbar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      menuIconClicked: false,\n    };\n  }\n\n  // fetching cart item to get the count of the item present in cart to show on cart icon\n  componentDidMount() {\n    this.props.dispatch(fetchCartItem());\n  }\n\n  // handle menu icon click for small size display\n  handleMenuIconClick = () => {\n    this.setState({ menuIconClicked: !this.state.menuIconClicked });\n  };\n\n  // handling navbar items button click\n  // on small screen when we click a button then menu list should be hidden\n  handleButtonClick = () => {\n    this.setState({ menuIconClicked: false });\n  };\n\n  // rendering navbar component\n  render() {\n    const { cartItemCount } = this.props;\n    return (\n      <nav className='navbar-container unselectable'>\n        <div className='navbar-logo'>\n          <Link to='/' onClick={this.handleButtonClick}>\n            EComs\n          </Link>\n        </div>\n        <div className='menu-icon' onClick={this.handleMenuIconClick}>\n          <i\n            className={\n              this.state.menuIconClicked ? \"fa fa-times\" : \"fa fa-bars\"\n            }\n            aria-hidden='true'\n          ></i>\n        </div>\n        <ul\n          className={\n            this.state.menuIconClicked ? \"navbar-menu active\" : \"navbar-menu\"\n          }\n        >\n          <li>\n            <Link\n              className='navbar-links'\n              to='/'\n              onClick={this.handleButtonClick}\n            >\n              Products\n            </Link>\n          </li>\n          <li>\n            <Link\n              className='navbar-links'\n              to='/add-product'\n              onClick={this.handleButtonClick}\n            >\n              Add Product\n            </Link>\n          </li>\n          <li>\n            <Link\n              className='navbar-links cart'\n              to='/cart'\n              onClick={this.handleButtonClick}\n            >\n              <i className='fa fa-shopping-cart' aria-hidden='true'></i>\n              <span>{cartItemCount > 0 ? cartItemCount : \"\"}</span>\n            </Link>\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\n// passing store item to props of component\nfunction mapStateToProps(state) {\n  return {\n    cartItemCount: state.product.cartItemCount,\n  };\n}\n\n// sending props to component\nexport default connect(mapStateToProps)(Navbar);\n","import * as React from 'react';\n\n// rendering progress bar component\nconst ProgressBar = () => {\n  return (\n    <div className=\"progress-bar-container\">\n      <div className=\"progress-bar-line\"></div>\n    </div>\n  );\n};\n\nexport default ProgressBar;\n","import React, { Component, createRef } from 'react';\nimport { connect } from 'react-redux';\nimport { successMessageAlert, errorMessageAlert } from '../../helpers';\n\nimport {\n  clearMessage,\n  clearError,\n  loadingStop,\n  setError,\n  addProduct,\n} from '../../actions';\n\nclass AddProduct extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: '',\n      price: '',\n      detail: '',\n      rating: 0,\n      image: '',\n    };\n    this.formRef = createRef();\n  }\n\n  // at component mounting setting loading to false\n  componentDidMount() {\n    const { isLoading, dispatch } = this.props;\n    if (isLoading === true) {\n      dispatch(loadingStop());\n    }\n  }\n\n  // at component updation checking for error and message\n  // if any error or message found then showing alert and clearing message\n  componentDidUpdate() {\n    const { error, dispatch, message } = this.props;\n    if (message != null) {\n      successMessageAlert(message.title, message.detail);\n      dispatch(clearMessage());\n    }\n    if (error != null) {\n      errorMessageAlert(error.title, error.detail);\n      dispatch(clearError());\n    }\n  }\n\n  // handle input form change and saving them in state\n  handleChange = (input, value) => {\n    if (input === 'title') {\n      this.setState({ title: value });\n    } else if (input === 'rating') {\n      this.setState({ rating: value });\n    } else if (input === 'detail') {\n      this.setState({ detail: value });\n    } else if (input === 'price') {\n      this.setState({ price: value });\n    } else if (input === 'image') {\n      this.setState({ image: value });\n    }\n  };\n\n  // handle form submission for creating new product\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { title, price, detail, rating, image } = this.state;\n    const { dispatch } = this.props;\n    // checking if any field in form is empty\n    // showing alert if any field is empty\n    if (\n      title.length === 0 ||\n      price.length === 0 ||\n      detail.length === 0 ||\n      rating.length === 0 ||\n      image.length === 0\n    ) {\n      dispatch(setError('Missing Field', 'Please Enter All Fields'));\n      return;\n    }\n    // adding product\n    dispatch(addProduct(this.state));\n    this.formRef.current.reset();\n  };\n\n  // rendering add product component\n  render() {\n    return (\n      <div className=\"add-product-container\">\n        <div className=\"heading\">Add Product</div>\n        <form ref={this.formRef}>\n          <div className=\"input-container\">\n            <label>Title</label>\n            <input\n              type=\"text\"\n              required={true}\n              placeholder=\"Title\"\n              onChange={(event) => {\n                this.handleChange('title', event.target.value);\n              }}\n            />\n          </div>\n          <div className=\"input-container\">\n            <label>Price</label>\n            <input\n              type=\"number\"\n              required={true}\n              placeholder=\"Price\"\n              onChange={(event) => {\n                this.handleChange('price', event.target.value);\n              }}\n            />\n          </div>\n          <div className=\"input-container\">\n            <label>Rating</label>\n            <input\n              type=\"number\"\n              required={true}\n              placeholder=\"Rating\"\n              onChange={(event) => {\n                this.handleChange('rating', event.target.value);\n              }}\n            />\n          </div>\n          <div className=\"input-container\">\n            <label>Detail</label>\n            <textarea\n              rows=\"5\"\n              type=\"text\"\n              required={true}\n              placeholder=\"Detail\"\n              onChange={(event) => {\n                this.handleChange('detail', event.target.value);\n              }}\n            />\n          </div>\n          <div className=\"input-container\">\n            <label>Image URL</label>\n            <input\n              type=\"text\"\n              placeholder=\"Image URL\"\n              onChange={(event) => {\n                this.handleChange('image', event.target.value);\n              }}\n            />\n          </div>\n          <button onClick={this.handleSubmit}>Submit</button>\n        </form>\n      </div>\n    );\n  }\n}\n\n// mapping store item to props\nfunction mapStateToProps(state) {\n  return {\n    error: state.alert.error,\n    message: state.alert.message,\n    isLoading: state.progress.isLoading,\n  };\n}\n\n// sending props to component\nexport default connect(mapStateToProps)(AddProduct);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n  fetchOneProduct,\n  clearMessage,\n  clearError,\n  loadingStop,\n  addProductToCart,\n} from '../../actions';\nimport { successMessageAlert, errorMessageAlert } from '../../helpers';\n\nclass ProductDetail extends Component {\n  // at component mounting setting loading to false\n  // fetching product detail with id received in params\n  componentWillMount() {\n    const { isLoading, dispatch } = this.props;\n    if (isLoading === true) {\n      dispatch(loadingStop());\n    }\n    let id = this.props.match.params.id;\n    dispatch(fetchOneProduct(id));\n  }\n\n  // at component updation checking for error and message\n  // if any error or message found then showing alert and clearing message\n  componentDidUpdate() {\n    const { error, dispatch, message } = this.props;\n    if (message != null) {\n      successMessageAlert(message.title, message.detail);\n      dispatch(clearMessage());\n    }\n    if (error != null) {\n      errorMessageAlert(error.title, error.detail);\n      dispatch(clearError());\n    }\n  }\n\n  // handling add to cart button to adding the current product into cart\n  handleCartButtonClick = () => {\n    this.props.dispatch(addProductToCart(this.props.product));\n  };\n\n  // rendering current product detail\n  render() {\n    if (this.props.product === null) {\n      return <div></div>;\n    }\n    const { title, price, detail, image, rating } = this.props.product;\n    let ratingArray = [1, 2, 3, 4, 5];\n    return (\n      <div className=\"product-detail-container\">\n        <div className=\"heading\">Product Detail</div>\n        <div className=\"img-container\">\n          <img src={image} alt={title}></img>\n        </div>\n        <div className=\"creadential-container\">\n          <div>Name :</div>\n          <div>{title}</div>\n        </div>\n        <div className=\"creadential-container\">\n          <div>Price :</div>\n          <div>{price}</div>\n        </div>\n        <div className=\"creadential-container\">\n          <div>Rating :</div>\n          <div>\n            {ratingArray.map((item) => {\n              if (item <= rating) {\n                return (\n                  <i className=\"fa fa-star\" aria-hidden=\"true\" key={item}></i>\n                );\n              }\n              return <span></span>;\n            })}\n          </div>\n        </div>\n        <div className=\"creadential-container detail-container\">\n          <div className=\"detail\">Detail :</div>\n          <div className=\"text\">{detail}</div>\n        </div>\n        <button className=\"button\" onClick={this.handleCartButtonClick}>\n          Add to Cart\n        </button>\n      </div>\n    );\n  }\n}\n\n// mapping store item to props\nfunction mapStateToProps(state) {\n  return {\n    product: state.product.currentProduct,\n    isLoading: state.progress.isLoading,\n    error: state.alert.error,\n    message: state.alert.message,\n  };\n}\n\n// sending props to component\nexport default connect(mapStateToProps)(ProductDetail);\n","import React, { Component } from 'react';\nimport ProductItem from './ProductItem';\nimport { connect } from 'react-redux';\nimport {\n  clearError,\n  clearMessage,\n  loadingStop,\n  deleteProduct,\n  fetchProduct,\n  addProductToCart,\n  updateProductItem,\n} from '../../actions';\nimport { errorMessageAlert, successMessageAlert } from '../../helpers';\n\n// comparting function to comparet price of two function\nfunction compare_item(a, b) {\n  // a should come before b in the sorted order\n  if (eval(a.price) < eval(b.price)) {\n    return -1;\n    // a should come after b in the sorted order\n  } else if (eval(a.price) > eval(b.price)) {\n    return 1;\n    // and and b are the same\n  } else {\n    return 0;\n  }\n}\n\nclass Products extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editableID: '',\n      sortByPrice: false,\n    };\n  }\n\n  // at component mounting setting loading to false\n  // fethcing all the product as well to show on screen\n  componentDidMount() {\n    const { isLoading, dispatch } = this.props;\n    if (isLoading === true) {\n      dispatch(loadingStop());\n    }\n    dispatch(fetchProduct());\n  }\n\n  //handle sort button click\n  // onclicking sort button toggling sort button status\n  onClickSortByPrice = () => {\n    const { sortByPrice } = this.state;\n    this.setState({ sortByPrice: !sortByPrice });\n  };\n\n  // at component updation checking for error and message\n  // if any error or message found then showing alert and clearing message\n  componentDidUpdate() {\n    const { error, dispatch, message } = this.props;\n    if (message != null) {\n      successMessageAlert(message.title, message.detail);\n      dispatch(clearMessage());\n    }\n    if (error != null) {\n      errorMessageAlert(error.title, error.detail);\n      dispatch(clearError());\n    }\n  }\n\n  // set editable item's id in state\n  // so when the item got render if these id matches with that item\n  // then this item will open in edit mode instead of normal mode\n  setEditableItem = (id) => {\n    this.setState({ editableID: id });\n  };\n\n  // adding product to the cart\n  handleAddToCart = (product) => {\n    this.props.dispatch(addProductToCart(product));\n  };\n\n  // deleting product\n  handleDeleteButton = (id) => {\n    this.props.dispatch(deleteProduct(id));\n  };\n\n  // after edition is done\n  // saving the new value of product in db and updating it as well\n  // passing relevent function to apply on different places in props\n  handleSaveButton = (id, product) => {\n    this.props.dispatch(updateProductItem(id, product));\n  };\n\n  // rending item on basis of various parameters\n  // if sorting then sorted order otherwise in normal order\n  render() {\n    let { editableID, sortByPrice } = this.state;\n    let { product } = this.props;\n    if (sortByPrice) {\n      let list = [];\n      list = [...product];\n      product = list.sort(compare_item);\n    } else {\n      product = this.props.product;\n    }\n    return (\n      <div className=\"products-container\">\n        <div className=\"products-heading\">\n          <div className=\"heading\">Products </div>\n          <div className=\"sort-price\" onClick={this.onClickSortByPrice}>\n            {sortByPrice ? (\n              <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\n            ) : (\n              'Sort By Price'\n            )}\n          </div>\n        </div>\n        {product.map((product) => {\n          return (\n            <ProductItem\n              product={product}\n              editable={editableID === product.id}\n              setEditableID={this.setEditableItem}\n              cartButtonClick={this.handleAddToCart}\n              deleteButtonClick={this.handleDeleteButton}\n              handleSaveButton={this.handleSaveButton}\n              key={product.id}\n              isCart={false}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n\n// mapping store item to props\nfunction mapStateToProps(state) {\n  return {\n    isLoading: state.progress.isLoading,\n    error: state.alert.error,\n    message: state.alert.message,\n    product: state.product.products,\n  };\n}\n\n// sending props to component\nexport default connect(mapStateToProps)(Products);\n","import React, { Component } from 'react';\nimport { ProductItem } from '../../components';\nimport { connect } from 'react-redux';\nimport { errorMessageAlert, successMessageAlert } from '../../helpers';\nimport {\n  clearError,\n  clearMessage,\n  loadingStop,\n  fetchCartItem,\n  deleteCartItem,\n} from '../../actions';\n\nclass Cart extends Component {\n  // at component mounting setting loading to false\n  // fetching all the cart item and saving them in store\n  componentDidMount() {\n    const { isLoading, dispatch } = this.props;\n    if (isLoading === true) {\n      dispatch(loadingStop());\n    }\n    dispatch(fetchCartItem());\n  }\n\n  // at component updation checking for error and message\n  // if any error or message found then showing alert and clearing message\n  componentDidUpdate() {\n    const { error, dispatch, message } = this.props;\n    if (message != null) {\n      successMessageAlert(message.title, message.detail);\n      dispatch(clearMessage());\n    }\n    if (error != null) {\n      errorMessageAlert(error.title, error.detail);\n      dispatch(clearError());\n    }\n  }\n\n  // handleing removing from cart button\n  deleteItemFromCart = (product) => {\n    this.props.dispatch(deleteCartItem(product.id));\n  };\n\n  // rendering cart component\n  render() {\n    let product = this.props.product;\n    let total = 0;\n    // calculating value of total amout of all products\n    for (let i = 0; i < product.length; i++) {\n      total += eval(product[i].price);\n    }\n    return (\n      <div className=\"products-container\">\n        <div className=\"products-heading\">\n          <div className=\"heading\">Cart</div>\n          <div\n            className=\"sort-price\"\n            style={{\n              background: 'transparent',\n              color: 'black',\n              cursor: 'default',\n            }}\n            onClick={this.onClickSortByPrice}\n          >\n            Total : {total}\n          </div>\n        </div>\n        {product.map((product) => {\n          return (\n            <ProductItem\n              product={product}\n              editable={false}\n              cartButtonClick={this.deleteItemFromCart}\n              key={product.id}\n              isCart={true}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n\n// mapping store item to props\nfunction mapStateToProps(state) {\n  return {\n    error: state.alert.error,\n    message: state.alert.message,\n    isLoading: state.progress.isLoading,\n    product: state.product.cart,\n  };\n}\n\n// sending props to component\nexport default connect(mapStateToProps)(Cart);\n","import swal from 'sweetalert';\n\n// for showing alert for the missing field\nexport function missingFieldAlert(title, field) {\n  swal({\n    title: title,\n    text: `Please Enter ${field}`,\n    icon: 'warning',\n    button: 'Ok',\n  });\n}\n\n// for showing alert of the error message with detail\nexport function errorMessageAlert(title, error) {\n  swal({\n    title: title,\n    text: error,\n    icon: 'warning',\n    button: 'Ok',\n  });\n}\n\n// for showing alert of the success message with detail\nexport function successMessageAlert(title, message) {\n  swal({\n    title: title,\n    text: message,\n    icon: 'success',\n    button: 'Ok',\n  });\n}\n","// base url of API\nconst API_ROOT = \"https://5fbf466ffd14be00167486cd.mockapi.io/api/v1\";\n\n// generating different url with base url for different use\nexport const APIUrls = {\n  getProducts: () => `${API_ROOT}/product`,\n  getCartItem: () => `${API_ROOT}/cart`,\n  deleteProductUrl: (id) => `${API_ROOT}/product/${id}`,\n  deleteCartItemUrl: (id) => `${API_ROOT}/cart/${id}`,\n  updateProductUrl: (id) => `${API_ROOT}/product/${id}`,\n  fetchOneProductUrl: (id) => `${API_ROOT}/product/${id}`,\n};\n","import {\n  SET_MESSAGE,\n  CLEAR_MESSAGE,\n  SET_ERROR,\n  CLEAR_ERROR,\n} from '../actions/actionTypes';\n\n// loading reducer intial state to maintain message and error\nconst initialState = {\n  message: null,\n  error: null,\n};\n\n// changing message state in store on the basis of different actions for setting alerts\nexport default function auth(state = initialState, action) {\n  switch (action.type) {\n    case SET_MESSAGE:\n      return {\n        ...state,\n        message: { title: action.title, detail: action.detail },\n      };\n    case CLEAR_MESSAGE:\n      return {\n        ...state,\n        message: null,\n      };\n    case SET_ERROR:\n      return {\n        ...state,\n        error: { title: action.title, detail: action.detail },\n      };\n    case CLEAR_ERROR:\n      return {\n        ...state,\n        error: null,\n      };\n    default:\n      return state;\n  }\n}\n","import { LOADING_START, LOADING_STOP } from '../actions/actionTypes';\n\n// loading reducer intial state to maintain loading progress bar\nconst initialState = {\n  isLoading: false,\n};\n\n// changing store on the basis of different actions for loading progress bar\nexport default function auth(state = initialState, action) {\n  switch (action.type) {\n    case LOADING_START:\n      return {\n        ...state,\n        isLoading: true,\n      };\n    case LOADING_STOP:\n      return {\n        ...state,\n        isLoading: false,\n      };\n    default:\n      return state;\n  }\n}\n","import {\n  UPDATE_CART,\n  UPDATE_PRODUCT,\n  ADD_CURRENT_PRODUCT,\n} from '../actions/actionTypes';\n\n// loading reducer intial state to maintain product at different places\nconst initialState = {\n  products: [],\n  cart: [],\n  cartItemCount: 0,\n  currentProduct: null,\n};\n\n// changing store on the basis of different actions for setting product in different states\nexport default function auth(state = initialState, action) {\n  switch (action.type) {\n    case UPDATE_PRODUCT: {\n      return { ...state, products: action.product };\n    }\n    case UPDATE_CART: {\n      return {\n        ...state,\n        cart: action.cart,\n        cartItemCount: action.itemCount,\n      };\n    }\n    case ADD_CURRENT_PRODUCT: {\n      return {\n        ...state,\n        currentProduct: action.currentProduct,\n      };\n    }\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport alert from './alert';\nimport progress from './progress';\nimport product from './product';\n\n// exporting one reducer combining different reducers\nexport default combineReducers({ alert, progress, product });\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport { App } from './components';\nimport { configureStore } from './store';\nimport { Provider } from 'react-redux';\n\n// creating store to maintain items\nconst store = configureStore();\n\n// providing that store to all component\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducers';\nimport logger from 'redux-logger';\nlet store;\n\n//function for setting store and returning it\nexport function configureStore() {\n  store = createStore(reducer, applyMiddleware(thunk, logger));\n  return store;\n}\n"],"sourceRoot":""}